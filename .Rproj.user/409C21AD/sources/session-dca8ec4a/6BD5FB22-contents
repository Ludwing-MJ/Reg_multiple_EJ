#Algunos documentos de interés:
#https://fhernanb.github.io/libro_regresion/mod-poli.html
#https://bookdown.org/j_morales/librostat/rlm.html
#Modelos no lineales---- https://rdrr.io/cran/easynls/man/nlsplot.html
#https://rcompanion.org/handbook/I_11.html

# PREPARACIÓN DEL ENTORNO DE TRABAJO PARA EL ANALISIS

# Elimina todos los objetos creados anteriormente
rm(list=ls()) 

# INSTALACIÓN DE LOS PAQUETES PARA EL ANALISIS DE REGRESION
## NOTA: ESTOS PAQUETES FUNCIONAN A PARTIR DE LA VERSION 4.4.2 DE R 

if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(car)){install.packages("car")}
if(!require(carData)){install.packages("carData")}
if(!require(lmtest)){install.packages("lmtest")}
if(!require(segmented)){install.packages("segmented")}
if(!require(easynls)){install.packages("easynls")} #para el modelo lineal plateau
if(!require(rcompanion)){install.packages("rcompanion")}

# EJEMPLO DE APLICACIÓN DE LA REGRESIÓN EN LOS EXPERIMENTOS

##  Creando los vectores de datos
###  Los valores de rendimiento son promedios utilizando 12 valores, 
###  r=3 bloques y b=4 niveles de nitrógeno

# Niveles de nitrógeno utilizados en kilogramos por hectarea (Kg/ha)
N<-c(0,0, 0, 50,50, 50, 100, 100,100,150,150,150) 
# Rendimiento de cebolla en toneladas por hectárea (t/ha)
Rend<-c(12.67,11.11,9.38,22.05,21.72,24.43,24.79,26.32,24.08,27.49,27.31,25.46)

# Diagrama de dispersión de los datos considerando el rendimiento como 
# variable dependiente y el nitrógeno aplicado como variable independiente

plot(N,Rend, 
     xlab="Niveles de nitrógeno (kg/ha",
     ylab="Rendimiento de bulbos de cebolla (tm/ha)", 
     ylim=c(0,35)) 

# REGRESION POLINOMIAL 

# Calculo del Grado máximo del polinomio = 
# No. de niveles de N menos 1:  4-1=3

##  Elaboracion de un modelo de regresión de grado 1
mod1 = lm(Rend ~ N)
summary(mod1)

### Elaboración del gráfico de dispersión de los datos
plot(N, Rend, pch = 16, cex = 0.8)

### Incorporación de la funcion del modelo de grado 1 al gráfico
lines(N, mod1$fitted.values, col = 'blue', lwd = 2)

##  Elaboración de un modelo de regresión de grado 2
mod2 <- lm(Rend ~ N + I(N^2))
summary(mod2)

##  Elaboración de un modelo de regresión de grado 3
mod3 <- lm(Rend ~ N + I(N^2)+I(N^3))
summary(mod3)

# EVALUCION DE LOS MODELOS DESARROLLADOS
## Comparación de modelos utilizando ANOVA

### Comparación si el modelo cuadrático tiene un mejor ajuste
### que el modelo lineal.
anova(mod1, mod2)
### Comparación si el modelo cubico tiene un mejor ajuste
### que el modelo cuadrático.
anova(mod2, mod3)

#### NOTA: Hipótesis estadísticas utilizadas para interpretar y concluir el resultado de los ANOVA
#### Hipótesis nula (H₀): El modelo más simple es suficiente; no hay mejora significativa al añadir términos adicionales.
#### Hipótesis alternativa (H₁): El modelo más complejo mejora significativamente el ajuste.

## Comparación de los modelos usando el Criterio de Información de Akaike (AIC)
AIC(mod1, mod2, mod3)

## Usar el principio de la parsimonia. Elegir el modelo con menor AIC.

# COMPARACION GRAFICA DE LOS RESIDUOS DE LOS MODELOS
par(mfrow=c(2, 2))
plot(mod1, which=1, caption='Modelo lineal')
plot(mod2, which=1, caption='Modelo cuadratico')
plot(mod3, which=1, caption='Modelo cúbico')

# ESTIMACIÓN DE RENDIMIENTO USANDO EL MODELO CUBICO 
## Creacion del vector con los valores de nitrógeno cuyo rendimiento se quiere estimar
predis <- data.frame(N=c(0, 53.2, 55, 60, 65, 70, 75,91.89)) 
## Uso del modelo cubico para la estimación de valores de rendimiento
prediction.cubico <- predict(mod3, newdata=predis, interval="prediction", 
                                  level=.95)
prediction.cubico

# EVALUACION DE LOS SUPUESTOS ESTADÍSTICOS DEL MODELO
## SUPUESTO DE NORMALIDAD
shapiro.test(mod3$res)

## EVALUACION GRAFICA DEL SUPUESTO DE HOMOCEDASTICIDAD
pred_cubico<-predict(mod3)
resest_cubico<-rstandard(mod3)

plot(pred_cubico,resest_cubico,
     xlab="Valores predichos", 
     ylab="Residuos estandarizados", 
     ylim=c(-3,3))
abline(0,0)

## SUPUESTO DE HOMOCEDASTICIDAD EMPLEANDO EL studentized Breusch-Pagan test
bptest(mod3) #No hay evidencias que indiquen falta de homocedasticidad.

### NOTA: Hipótesis estadísticas utilizadas para interpretar y concluir el test
### Hipótesis nula (H₀): Los residuos son homocedásticos (la varianza es constante).
### Hipótesis alternativa (H₁): Los residuos son heterocedásticos (la varianza no es constante).

## SUPUESTO DE LA INDEPENDENCIA DE LOS RESIDUOS MEDIANTE LA PRUEBA DE Durbin-Watson
dwt(mod3,alternative = "two.sided") #No hay evidencia de autocorrelación

### NOTA: Hipótesis estadísticas utilizadas para interpretar y concluir el test
### Hipótesis nula (H₀): No hay autocorrelación en los residuos (los residuos son independientes).
### Hipótesis alternativa (H₁): Hay autocorrelación en los residuos (los residuos no son independientes).


####################################################################

# COMPARACION GRAFICA DE LOS MODELOS USANDO EL PAQUETE GGPLOT2

# Comparando gráficamente los tres modelos polinomiales
fert<-data.frame(N,Rend)

ggplot(fert, aes(x=N, y=Rend)) + 
  geom_point() +
  geom_smooth(method='lm', formula=y~x, se=FALSE, col='dodgerblue1') +
  geom_smooth(method='lm', formula=y~x+I(x^2), se=FALSE, col='tomato') +
  geom_smooth(method='lm', formula=y~x+I(x^2)+I(x^3), se=FALSE, col='green') +
  theme_minimal()+
  xlab (' Niveles de nitrógeno ') +
  ylab (' Rendimiento de bulbos de cebolla ')

# Sugerencia de un grafico mejor explicado (incluye una leyenda)
ggplot(fert, aes(x = N, y = Rend)) + 
  geom_point() +  # Puntos de los datos
  geom_smooth(aes(color = "Lineal (grado 1)"), 
              method = 'lm', formula = y ~ x, se = FALSE) +
  geom_smooth(aes(color = "Cuadrático (grado 2)"), 
              method = 'lm', formula = y ~ x + I(x^2), se = FALSE) +
  geom_smooth(aes(color = "Cúbico (grado 3)"), 
              method = 'lm', formula = y ~ x + I(x^2) + I(x^3), se = FALSE) +
  scale_color_manual(name = "Modelos",  # Nombre de la leyenda
                     values = c("Lineal (grado 1)" = "dodgerblue1",
                                "Cuadrático (grado 2)" = "tomato",
                                "Cúbico (grado 3)" = "green")) +
  theme_minimal() +
  xlab('Niveles de nitrógeno') +
  ylab('Rendimiento de cebolla')

##############################################################################
# Reproduciendo lo proporcionado por Infostat v.2020
# Función Nonlinear Least Squares - R
# th0 = intercepto
# th1 = inclinación del primer trecho 
# thb = punto de quiebre (inflexión)
# start = valores iniciales (semilla)

np <- nls(Rend~th0+th1*N*(N<=thb)+
             th1*thb*(N>thb),
             data=fert,
             start=list(th0=10, th1=0.23359, thb=50))

coef(np)            #coeficientes del modelo lineal plateau
confint.default(np) #intervalos de confianza para los coeficientes del modelo
summary(np)

################################################################################

# Reproduciendo lo proporcionado por Infostat v.2020
# Otra manera

linplat = function(x, a, b, clx)
{ifelse(x < clx, a + b * x,
        a + b * clx)}

model = nls(Rend ~ linplat(N, a, b, clx),
            data = fert,
            start = list(a   = 11.05,
                         b   = 0.23359,
                         clx = 50),
            trace = FALSE,
            nls.control(maxiter = 1000))

summary(model)

##  ESTIMACIÓN DE RENDIMIENTO USANDO EL MODELO LINEAL PLATEAU
predichos <- data.frame(N=c(0, 50, 55, 60, 63.592, 70, 75,91.89))
predichos.plateau <- predict(model, newdata=predichos, interval="prediction", 
                             level=.95)
data.frame(predichos,predichos.plateau)

## VERIFICACION DEL SUPUESTO DE NORMALIDAD PARA EL MODELO LINEAL PLATEAU
shapiro.test(residuals(model))
qqPlot(residuals(model),ylim=c(-6,6))

## VISUALIZACION GRAFICA DE LOS RESIDUOS DEL MODELO LINEAL PLATEAU
plot(fitted(model),
     residuals(model))

ajus<-fitted(model)

tabla<-data.frame(N,Rend,ajus)
tabla

plot(fitted(model),
     residuals(model))

## GRAFICO DE PREDICHOS PARA EL MODELO LINEAL PLATEAU
plotPredy(data  = fert,
          x     = N,
          y     = Rend,
          model = model,
          xlab  = "Niveles de nitrógeno",
          ylab  = "Rendimiento de cebolla")

### Necesitamos la biblioteca rcompanion

###########################################################################

